export namespace config {
    export { isDebugMode };
    export { KINDE_AUTH_API_PATH as apiPath };
    export { initialState };
    export { SESSION_PREFIX };
    export { KINDE_SITE_URL as redirectURL };
    export { KINDE_POST_LOGIN_REDIRECT_URL as postLoginRedirectURL };
    export { KINDE_ISSUER_URL as issuerURL };
    export { KINDE_CLIENT_ID as clientID };
    export { KINDE_CLIENT_SECRET as clientSecret };
    export { KINDE_POST_LOGOUT_REDIRECT_URL as postLogoutRedirectURL };
    export let audience: string | string[];
    export { KINDE_COOKIE_DOMAIN as cookieDomain };
    export let responseType: string;
    export let codeChallengeMethod: string;
    export namespace redirectRoutes {
        let callback: string;
    }
    export namespace issuerRoutes {
        let logout: string;
        let login: string;
        let register: string;
        let token: string;
        let profile: string;
    }
    export namespace clientOptions {
        let audience_1: string | string[];
        export { audience_1 as audience };
        export let authDomain: any;
        export let clientId: string;
        export let clientSecret: string;
        export let logoutRedirectURL: any;
        export let redirectURL: string;
        export { version as frameworkVersion };
        export { KINDE_SCOPE as scope };
    }
    export let grantType: string;
}
declare const isDebugMode: boolean;
declare const KINDE_AUTH_API_PATH: any;
/**
 * @type {import('../../types').KindeState}
 */
declare const initialState: import('../../types').KindeState;
declare const SESSION_PREFIX: "pkce-verifier";
declare const KINDE_SITE_URL: any;
declare const KINDE_POST_LOGIN_REDIRECT_URL: any;
declare const KINDE_ISSUER_URL: any;
declare const KINDE_CLIENT_ID: string;
declare const KINDE_CLIENT_SECRET: string;
declare const KINDE_POST_LOGOUT_REDIRECT_URL: any;
declare const KINDE_COOKIE_DOMAIN: any;
import { version } from '../utils/version';
declare const KINDE_SCOPE: string;
export {};
//# sourceMappingURL=index.d.ts.map